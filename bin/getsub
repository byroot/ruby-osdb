#!/usr/bin/env ruby
require 'optparse'
require 'uri'
require 'rubygems'
require File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'osdb'))


class GetSub

  def initialize
    @options = {:language => env_lang.to_iso639_2b, :force => false, :dir => nil, :methods => 'h'}
    @parser ||= OptionParser.new do |opts|
      opts.banner = "Automatically download subs for your video files using opensubtitle.org"
      opts.separator ""
      opts.separator "Usage: getsub [options] DIRECTORY | VIDEO_FILE [VIDEO_FILE ...]"
      opts.separator ""
      opts.separator "Main options:"

      opts.on("-a", "--auto", "Do not ask user to resolve hash conflicts.") { @options[:auto] = true }

      opts.on("-l", "--language LANGUAGE", "Sub language ISO 639-2 code like fre or eng. Default: env $LANG (#{env_lang.to_iso639_2b})") do |language|
        if language.to_s.length != 3
          STDERR.puts "Invalid argument: Language should specified as ISO 639-2 (ie, 3 letters, like 'eng' or 'fre')"
          exit 1
        end
        @options[:language] = language.to_s
      end

      opts.on("-f", "--force", "Download sub even if video already has one") { @options[:force] = true }

      opts.on("-t", "--type FORMATS", "Select only subtitles in specified formats. e.g -t srt,sub") { |formats| @options[:formats] = formats.to_s.split(',') }

      methods_help = "Ordered list of search methods. h: by movie hash, i: by name on IMDB, n: by name on OSDb, p: by filename on OSDb. e.g -s hi . Default: h"
      opts.on("-s", "--search-by METHODS", methods_help) do |methods|
        unless methods =~ /^[hinp]+$/
          STDERR.puts "Invalid argument: Available search methods are: h, i, n and p."
          exit 1
        end
        @options[:methods] = methods
      end

    end
  end

  def env_lang
    OSDb::Language.from_locale(ENV['LANG'])
  end

  def run!(files)
    @parser.parse!

    movie_files = files.map{ |path| OSDb::MovieFile.new(path) }

    movie_files.each do |movie_file|
      begin
        puts "* Search subtitles for #{movie_file.name}"
        if movie_file.has_sub? && !@options[:force]
          puts "* Sub already there. To override it use --force"
          puts
          next
        end

        if sub = subtitle_finder.find_sub_for(movie_file, @options[:language])
          download_sub!(sub, movie_file)
        else
          puts "* No sub found"
        end
        puts
      rescue Exception => e
        report_exception(e)
      end
    end
  end

  def report_exception(exception)
    puts "Something crashed."
    puts "Feel free to report the error here: https://github.com/byroot/ruby-osdb/issues"
    puts "With the following debug informations:"
    puts
    puts "#{exception.class.name}: #{exception.message}:"
    puts exception.backtrace
    puts
  end

  def subtitle_finder
    @subtitle_finder ||= OSDb::SubtitleFinder.new(search_engines, finders, selectors)
  end

  SEARCH_ENGINES = {
    'h' => OSDb::Search::MovieHash,
    'i' => OSDb::Search::IMDB,
    'n' => OSDb::Search::Name,
    'p' => OSDb::Search::Path
  }

  def search_engines
    @options[:methods].to_s.each_char.to_a.uniq.map do |char|
      SEARCH_ENGINES[char.to_s].new(server)
    end
  end

  def finders
    [OSDb::Finder::Score.new]
  end

  def selectors
    movie_finder = if @options[:auto]
      OSDb::Finder::First.new # TODO: try to match subtitle movie name with filename
    else
      OSDb::Finder::Interactive.new
    end
    
    selectors = [
      OSDb::Selector::Movie.new(movie_finder)
    ]
    selectors << OSDb::Selector::Format.new(@options[:formats]) if @options[:formats]
    selectors
  end

  def server
    @server ||= OSDb::Server.new(
      :host => 'api.opensubtitles.org',
      :path => '/xml-rpc', 
      :timeout => 90, 
      :useragent => "SubDownloader 2.0.10" # register useragent ? WTF ? too boring.
    ) 
  end

  def download_sub!(sub, movie_file)
    sub_path = movie_file.sub_path(sub.format)
    download!(sub.url, sub_path)
  end

  def curl_available?
    %x{ curl --version 2> /dev/null > /dev/null }
    $?.success?
  end

  def wget_available?
    %x{ wget --version 2> /dev/null > /dev/null }
    $?.success?
  end

  def download!(url, local_path)
    # TODO: use Net::HTTP and ZLib to avoid shell dependency
    puts "* download #{url} to #{local_path}"
    if curl_available?
      %x{ curl -s '#{url}' | gunzip > "#{local_path}" }
    elsif wget_available?
      %x{ wget -O - -q '#{url}' | gunzip > "#{local_path}"}
    else
      puts "Can't found any curl or wget please install one of them or manualy download your sub"
      puts url
    end
  end

end

GetSub.new.run!(ARGV)
